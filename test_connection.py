#!/usr/bin/env python3
"""
Script para probar la conexi√≥n a Supabase localmente antes de deployar.
Verifica que el Transaction Pooler funcione correctamente.
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.db import connection, OperationalError
from smartsales.db_utils import execute_query_with_retry
import time


def test_connection():
    """Prueba la conexi√≥n b√°sica a la BD"""
    print("üîç Probando conexi√≥n a base de datos...")
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            if result and result[0] == 1:
                print("‚úÖ Conexi√≥n exitosa")
                return True
            else:
                print("‚ùå Respuesta inesperada")
                return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False


def test_retry_logic():
    """Prueba el retry logic"""
    print("\nüîç Probando retry logic...")
    try:
        result = execute_query_with_retry(
            "SELECT 1 as test",
            fetch_one=True
        )
        if result and result[0] == 1:
            print("‚úÖ Retry logic funciona correctamente")
            return True
        else:
            print("‚ùå Retry logic no devolvi√≥ resultado esperado")
            return False
    except Exception as e:
        print(f"‚ùå Error en retry logic: {e}")
        return False


def test_multiple_queries():
    """Prueba m√∫ltiples queries consecutivas"""
    print("\nüîç Probando m√∫ltiples queries consecutivas...")
    try:
        for i in range(5):
            result = execute_query_with_retry(
                f"SELECT {i+1} as num",
                fetch_one=True
            )
            if not result or result[0] != i+1:
                print(f"‚ùå Query {i+1} fall√≥")
                return False
            print(f"  ‚úì Query {i+1} OK")
            time.sleep(0.5)
        print("‚úÖ Todas las queries consecutivas exitosas")
        return True
    except Exception as e:
        print(f"‚ùå Error en queries consecutivas: {e}")
        return False


def test_connection_info():
    """Muestra informaci√≥n de la conexi√≥n"""
    print("\nüìä Informaci√≥n de conexi√≥n:")
    try:
        db_settings = connection.settings_dict
        print(f"  Host: {db_settings.get('HOST', 'N/A')}")
        print(f"  Port: {db_settings.get('PORT', 'N/A')}")
        print(f"  Name: {db_settings.get('NAME', 'N/A')}")
        print(f"  User: {db_settings.get('USER', 'N/A')}")
        print(f"  Conn Max Age: {db_settings.get('CONN_MAX_AGE', 'N/A')}")
        print(f"  Conn Health Checks: {db_settings.get('CONN_HEALTH_CHECKS', 'N/A')}")
        
        # Verificar que sea el pooler
        host = db_settings.get('HOST', '')
        port = db_settings.get('PORT', '')
        
        if 'pooler' in host and port == 6543:
            print("\n‚úÖ Usando Transaction Pooler correctamente (puerto 6543)")
        elif port == 5432:
            print("\n‚ö†Ô∏è  ADVERTENCIA: Usando conexi√≥n directa (puerto 5432)")
            print("   Se recomienda usar Transaction Pooler (puerto 6543) en producci√≥n")
        else:
            print(f"\n‚ö†Ô∏è  Puerto inusual: {port}")
        
        return True
    except Exception as e:
        print(f"‚ùå Error obteniendo informaci√≥n: {e}")
        return False


def test_table_access():
    """Prueba acceso a tablas del proyecto"""
    print("\nüîç Probando acceso a tablas...")
    try:
        # Verificar que exista la tabla usuario
        result = execute_query_with_retry(
            """
            SELECT COUNT(*) FROM usuario
            """,
            fetch_one=True
        )
        count = result[0] if result else 0
        print(f"  ‚úì Tabla 'usuario': {count} registros")
        
        # Verificar que exista la tabla roles
        result = execute_query_with_retry(
            """
            SELECT COUNT(*) FROM roles
            """,
            fetch_one=True
        )
        count = result[0] if result else 0
        print(f"  ‚úì Tabla 'roles': {count} registros")
        
        print("‚úÖ Acceso a tablas exitoso")
        return True
    except Exception as e:
        print(f"‚ùå Error accediendo a tablas: {e}")
        print("   Aseg√∫rate de haber ejecutado las migraciones")
        return False


def main():
    """Ejecuta todos los tests"""
    print("=" * 60)
    print("üß™ TEST DE CONEXI√ìN A SUPABASE")
    print("=" * 60)
    
    tests = [
        ("Informaci√≥n de conexi√≥n", test_connection_info),
        ("Conexi√≥n b√°sica", test_connection),
        ("Retry logic", test_retry_logic),
        ("Queries consecutivas", test_multiple_queries),
        ("Acceso a tablas", test_table_access),
    ]
    
    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"\n‚ùå Error cr√≠tico en '{name}': {e}")
            results.append((name, False))
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE TESTS")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"  {status} - {name}")
    
    print(f"\nResultado: {passed}/{total} tests pasados")
    
    if passed == total:
        print("\nüéâ ¬°Todos los tests pasaron! Tu configuraci√≥n est√° lista para deploy.")
        return 0
    else:
        print("\n‚ö†Ô∏è  Algunos tests fallaron. Revisa la configuraci√≥n antes de deployar.")
        return 1


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Tests interrumpidos por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        sys.exit(1)
